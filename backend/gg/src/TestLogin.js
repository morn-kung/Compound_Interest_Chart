/**
 * Test Login Functions - Server Side Debugging
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏ô GAS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Login ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á Server
 * @created 2025-09-28
 */

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet user
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Sheet user
 */
function testGetUserData() {
  try {
    console.log('üîç Testing getUserData...');
    
    const sheet = getSheet(CONFIG.SHEETS.USER);
    if (!sheet) {
      return { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet user' };
    }
    
    const values = sheet.getDataRange().getValues();
    console.log('üìä Sheet data rows:', values.length);
    
    if (values.length <= 1) {
      return { 
        error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet user',
        headers: values[0] || [],
        rowCount: values.length 
      };
    }
    
    const headers = values[0];
    const users = [];
    
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const user = {
        rowIndex: i + 1,
        empId: row[0],
        empIdType: typeof row[0],
        fullName: row[1],
        email: row[2],
        role: row[3],
        status: row[4],
        statusType: typeof row[4],
        passwordHash: row[5] ? row[5].substring(0, 10) + '...' : '‡πÑ‡∏°‡πà‡∏°‡∏µ password',
        passwordLength: row[5] ? row[5].length : 0
      };
      users.push(user);
    }
    
    return {
      success: true,
      sheetName: CONFIG.SHEETS.USER,
      headers: headers,
      totalRows: values.length,
      userCount: users.length,
      users: users,
      columnMapping: CONFIG.COLUMNS.USER
    };
    
  } catch (error) {
    console.error('‚ùå Error in testGetUserData:', error);
    return { 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ‡∏î‡πâ‡∏ß‡∏¢ username
 * @param {string} username - Username ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 */
function testFindUser(username = '4498') {
  try {
    console.log('üîç Testing findUser with username:', username);
    
    const sheet = getSheet(CONFIG.SHEETS.USER);
    const values = sheet.getDataRange().getValues();
    
    if (values.length <= 1) {
      return { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Sheet user' };
    }
    
    const results = [];
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const empId = row[0];
      const email = row[2];
      const status = row[4];
      
      const matchTests = {
        empIdExact: empId === username,
        empIdString: String(empId) === String(username),
        empIdNumber: Number(empId) === Number(username),
        emailMatch: email === username,
        statusActive: status === 1,
        statusActiveString: String(status) === '1'
      };
      
      if (matchTests.empIdExact || matchTests.empIdString || matchTests.emailMatch) {
        results.push({
          rowIndex: i + 1,
          empId: empId,
          empIdType: typeof empId,
          email: email,
          status: status,
          statusType: typeof status,
          matchTests: matchTests,
          wouldMatch: (matchTests.empIdExact || matchTests.empIdString || matchTests.emailMatch) && matchTests.statusActive
        });
      }
    }
    
    return {
      success: true,
      searchUsername: username,
      searchUsernameType: typeof username,
      matchingUsers: results,
      totalMatches: results.length
    };
    
  } catch (error) {
    console.error('‚ùå Error in testFindUser:', error);
    return { 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ verify password
 * @param {string} username - Username
 * @param {string} password - Password
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function testVerifyPassword(username = '4498', password = 'likit.se4498') {
  try {
    console.log('üîê Testing verifyPassword...');
    
    // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏Å‡πà‡∏≠‡∏ô
    const sheet = getSheet(CONFIG.SHEETS.USER);
    const values = sheet.getDataRange().getValues();
    
    let targetUser = null;
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const empId = row[0];
      const email = row[2];
      
      if (String(empId) === String(username) || email === username) {
        targetUser = {
          empId: empId,
          email: email,
          storedHash: row[5],
          status: row[4]
        };
        break;
      }
    }
    
    if (!targetUser) {
      return { 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö user',
        searchUsername: username,
        searchUsernameType: typeof username
      };
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á hash
    const emailPrefix = targetUser.email.split('@')[0];
    const expectedPasswordString = emailPrefix + targetUser.empId;
    
    console.log('üìù Password string should be:', expectedPasswordString);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    const expectedHash = hashPassword(targetUser.email, targetUser.empId);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö verifyPassword function
    const verifyResult = verifyPassword(password, targetUser.email, targetUser.empId);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ hash password ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    const inputHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, password)
                               .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
                               .join('');
    
    return {
      success: true,
      targetUser: {
        empId: targetUser.empId,
        email: targetUser.email,
        status: targetUser.status,
        storedHashPreview: targetUser.storedHash ? targetUser.storedHash.substring(0, 20) + '...' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'
      },
      passwordTests: {
        inputPassword: password,
        expectedPasswordString: expectedPasswordString,
        expectedHash: expectedHash,
        storedHash: targetUser.storedHash,
        inputPasswordHash: inputHash,
        hashesMatch: expectedHash === targetUser.storedHash,
        inputHashMatch: inputHash === targetUser.storedHash,
        verifyPasswordResult: verifyResult
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error in testVerifyPassword:', error);
    return { 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login ‡πÅ‡∏ö‡∏ö step-by-step
 * @param {string} username - Username
 * @param {string} password - Password  
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
 */
function testLoginStepByStep(username = '4498', password = 'likit.se4498') {
  try {
    console.log('üöÄ Testing Login Step by Step...');
    
    const steps = [];
    
    // Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheet
    steps.push('Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Sheet user');
    const sheet = getSheet(CONFIG.SHEETS.USER);
    if (!sheet) {
      return { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet user', steps: steps };
    }
    steps.push('‚úÖ Sheet user ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    
    // Step 2: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const values = sheet.getDataRange().getValues();
    steps.push(`Step 2: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏û‡∏ö ${values.length} ‡πÅ‡∏ñ‡∏ß`);
    
    if (values.length <= 1) {
      return { error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', steps: steps };
    }
    
    // Step 3: ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    steps.push('Step 3: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    let foundUser = null;
    let searchIndex = -1;
    
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const empId = row[0];
      const email = row[2];
      const userStatus = row[4];
      
      steps.push(`  - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß ${i}: EmpId=${empId} (${typeof empId}), Email=${email}, Status=${userStatus} (${typeof userStatus})`);
      
      if ((String(empId) === String(username) || email === username)) {
        foundUser = {
          empId: empId,
          fullName: row[1],
          email: email,
          role: row[3],
          status: userStatus,
          password: row[5]
        };
        searchIndex = i;
        steps.push(`  ‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß ${i}`);
        break;
      }
    }
    
    if (!foundUser) {
      return { 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        searchUsername: username,
        steps: steps 
      };
    }
    
    // Step 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    steps.push('Step 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    if (foundUser.status !== 1 && String(foundUser.status) !== '1') {
      return { 
        error: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        userStatus: foundUser.status,
        statusType: typeof foundUser.status,
        steps: steps 
      };
    }
    steps.push('‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    
    // Step 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    steps.push('Step 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
    const passwordValid = verifyPassword(password, foundUser.email, foundUser.empId);
    
    if (!passwordValid) {
      return { 
        error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        passwordVerifyResult: passwordValid,
        steps: steps 
      };
    }
    steps.push('‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    
    // Step 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á token
    steps.push('Step 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á token');
    const user = {
      id: foundUser.empId,
      fullName: foundUser.fullName,
      email: foundUser.email,
      role: foundUser.role,
      status: foundUser.status
    };
    
    const token = generateToken(user);
    steps.push('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    return {
      success: true,
      message: 'Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: user,
      token: token ? token.substring(0, 20) + '...' : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á token',
      steps: steps
    };
    
  } catch (error) {
    console.error('‚ùå Error in testLoginStepByStep:', error);
    return { 
      error: error.toString(),
      stack: error.stack,
      steps: steps || []
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á authenticateUser function ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
 * @param {string} username - Username
 * @param {string} password - Password
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
function testAuthenticateUser(username = '4498', password = 'likit.se4498') {
  try {
    console.log('üîê Testing authenticateUser function directly...');
    
    const result = authenticateUser(username, password);
    
    return {
      testFunction: 'authenticateUser',
      inputUsername: username,
      inputPassword: password.substring(0, 4) + '...',
      result: result
    };
    
  } catch (error) {
    console.error('‚ùå Error in testAuthenticateUser:', error);
    return { 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Configuration
 * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• config
 */
function testConfiguration() {
  try {
    return {
      success: true,
      config: {
        SHEETS: CONFIG.SHEETS,
        COLUMNS: CONFIG.COLUMNS,
        spreadsheetId: CONFIG.SPREADSHEET_ID
      },
      spreadsheetAccess: {
        canAccess: !!getSpreadsheetSafely(),
        sheets: getAllSheetNames()
      }
    };
  } catch (error) {
    return { 
      error: error.toString(),
      stack: error.stack 
    };
  }
}

/**
 * ‡∏£‡∏±‡∏ô test ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * @param {string} username - Username ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * @param {string} password - Password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function runAllLoginTests(username = '4498', password = 'likit.se4498') {
  console.log('üß™ Running All Login Tests...');
  
  return {
    timestamp: new Date().toISOString(),
    testInputs: { username, password: password.substring(0, 4) + '...' },
    tests: {
      configuration: testConfiguration(),
      userData: testGetUserData(),
      findUser: testFindUser(username),
      verifyPassword: testVerifyPassword(username, password),
      stepByStep: testLoginStepByStep(username, password),
      authenticateUser: testAuthenticateUser(username, password)
    }
  };
}