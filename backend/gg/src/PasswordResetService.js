/**
 * Password Reset Service - Handle forgot password functionality
 * Integrates with existing project structure and sends emails
 * @created 2025-09-27
 */

/**
 * Request password reset - ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ email
 * @param {string} email - Email address to reset password
 * @returns {Object} Reset request result
 */
function requestPasswordReset(email) {
  try {
    console.log(`üîÑ Processing password reset request for: ${email}`);
    
    if (!email || !email.includes('@')) {
      return createJSONResponse('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ email ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å email
    const userInfo = findUserByEmail(email);
    if (!userInfo.found) {
      // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (security)
      return createJSONResponse('success', '‡∏´‡∏≤‡∏Å‡∏°‡∏µ email ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÉ‡∏´‡πâ', {
        email: email,
        message: 'Email sent if exists'
      });
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ô‡∏µ‡πâ
    const resetResult = resetUserPassword(userInfo.empId, userInfo.email);
    
    if (resetResult.status === 'success') {
      // ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      const emailResult = sendPasswordResetEmail(userInfo, resetResult);
      
      if (emailResult.status === 'success') {
        return createJSONResponse('success', '‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á email ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß', {
          email: email,
          empId: userInfo.empId,
          sentAt: new Date().toISOString()
        });
      } else {
        // Password reset ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á email ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        return createJSONResponse('warning', '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á email ‡πÑ‡∏î‡πâ', {
          email: email,
          empId: userInfo.empId,
          emailError: emailResult.message
        });
      }
    } else {
      return createJSONResponse('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + resetResult.message);
    }
    
  } catch (error) {
    logError('requestPasswordReset', error, { email });
    return createJSONResponse('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
  }
}

/**
 * Find user by email address
 * @param {string} email - Email to search for
 * @returns {Object} User information if found
 */
function findUserByEmail(email) {
  try {
    const spreadsheet = getSpreadsheetSafely();
    const userSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.USER);
    
    if (!userSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "${CONFIG.SHEETS.USER}"`);
    }
    
    const data = userSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Using CONFIG constants for column access
    
    // Search for user
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[CONFIG.COLUMNS.USER.EMAIL] && row[CONFIG.COLUMNS.USER.EMAIL].toLowerCase() === email.toLowerCase()) {
        return {
          found: true,
          empId: String(row[CONFIG.COLUMNS.USER.EMP_ID]), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô type mismatch
          email: String(row[CONFIG.COLUMNS.USER.EMAIL]),
          fullName: String(row[CONFIG.COLUMNS.USER.FULL_NAME_TH]),
          role: String(row[CONFIG.COLUMNS.USER.ROLE]),
          status: String(row[CONFIG.COLUMNS.USER.USER_STATUS]),
          rowIndex: i
        };
      }
    }
    
    return { found: false };
    
  } catch (error) {
    console.error('Error finding user by email:', error);
    return { found: false, error: error.toString() };
  }
}

/**
 * Reset password for a specific user (adapted from renew_password_safe.js)
 * @param {string} empId - Employee ID
 * @param {string} email - User's email
 * @returns {Object} Reset result with new password details
 */
function resetUserPassword(empId, email) {
  try {
    console.log(`üîë Resetting password for user: ${empId} (SAP Style - Temporary Password)`);
    
    if (!empId || !email) {
      throw new Error('EmpId ‡πÅ‡∏•‡∏∞ Email ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏');
    }
    
    const spreadsheet = getSpreadsheetSafely();
    const userSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.USER);
    
    if (!userSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "${CONFIG.SHEETS.USER}"`);
    }
    
    // *** SAP STYLE: ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ó‡∏ô ***
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å emailPrefix + empId ‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    const passwordString = 'Init4321'; // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô SAP
    
    // Generate SHA-256 hash
    const passwordHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, passwordString)
                                  .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
                                  .join('');
    
    // Update password in sheet
    const data = userSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Using CONFIG constants for column access
    
    // Find and update user row
    let updated = false;
    for (let i = 1; i < data.length; i++) {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô String ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô type mismatch
      if (String(data[i][CONFIG.COLUMNS.USER.EMP_ID]) === String(empId)) {
        data[i][CONFIG.COLUMNS.USER.PASSWORD] = passwordHash;
        
        // *** SAP STYLE: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ***
        data[i][CONFIG.COLUMNS.USER.REQUIRE_PASSWORD_CHANGE] = true; // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        data[i][CONFIG.COLUMNS.USER.TEMP_PASSWORD] = true; // ‡πÅ‡∏°‡∏£‡πå‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô temp password
        
        updated = true;
        break;
      }
    }
    
    if (!updated) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ EmpId: ${empId}`);
    }
    
    // Write back to sheet
    userSheet.getDataRange().setValues(data);
    
    console.log(`‚úÖ Password reset successful for user ${empId}`);
    
    return createJSONResponse('success', '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
      empId: empId,
      email: email,
      temporaryPassword: passwordString, // *** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å emailPrefix ‡πÄ‡∏õ‡πá‡∏ô temporaryPassword ***
      passwordHash: passwordHash,
      requirePasswordChange: true, // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™ ***
      resetAt: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error resetting user password:', error);
    return createJSONResponse('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.toString()}`);
  }
}

/**
 * Change user password (SAP Style - after temporary password login)
 * @param {string} empId - Employee ID
 * @param {string} currentPassword - Current temporary password
 * @param {string} newPassword - New password chosen by user
 * @returns {Object} Change password result
 */
function changeUserPassword(empId, currentPassword, newPassword) {
  try {
    console.log(`üîÑ Changing password for user: ${empId}`);
    
    const spreadsheet = getSpreadsheetSafely();
    const userSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.USER);
    
    if (!userSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "${CONFIG.SHEETS.USER}"`);
    }
    
    const data = userSheet.getDataRange().getValues();
    const headers = data[0];
    
    // Using CONFIG constants for column access
    
    // Find user
    let userRowIndex = -1;
    let userRow = null;
    
    for (let i = 1; i < data.length; i++) {
      if (String(data[i][CONFIG.COLUMNS.USER.EMP_ID]) === String(empId)) {
        userRowIndex = i;
        userRow = data[i];
        break;
      }
    }
    
    if (!userRow) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ EmpId: ${empId}`);
    }
    
    // Verify current password (should be Init4321 hash)
    const currentPasswordHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, currentPassword)
                                         .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
                                         .join('');
    
    if (userRow[CONFIG.COLUMNS.USER.PASSWORD] !== currentPasswordHash) {
      throw new Error('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
    // Hash new password
    const newPasswordHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, newPassword)
                                     .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
                                     .join('');
    
    // Update password and clear requirePasswordChange flag
    data[userRowIndex][CONFIG.COLUMNS.USER.PASSWORD] = newPasswordHash;
    data[userRowIndex][CONFIG.COLUMNS.USER.REQUIRE_PASSWORD_CHANGE] = false; // *** ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß ***
    data[userRowIndex][CONFIG.COLUMNS.USER.TEMP_PASSWORD] = false; // *** ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà temp password ‡πÅ‡∏•‡πâ‡∏ß ***
    
    // Write back to sheet
    userSheet.getDataRange().setValues(data);
    
    console.log(`‚úÖ Password changed successfully for user ${empId}`);
    
    return createJSONResponse('success', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
      empId: empId,
      message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
      changedAt: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error changing password:', error);
    return createJSONResponse('error', error.message);
  }
}

/**
 * Send password reset email to user
 * @param {Object} userInfo - User information
 * @param {Object} resetResult - Password reset result
 * @returns {Object} Email sending result
 */
function sendPasswordResetEmail(userInfo, resetResult) {
  try {
    console.log(`üìß Sending password reset email to: ${userInfo.email}`);
    console.log(`üìß Reset result structure:`, JSON.stringify(resetResult, null, 2));
    
    const subject = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Trading Journal';
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ email ‡πÅ‡∏ö‡∏ö SAP Style
    const emailBody = `
‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì${userInfo.fullName},

‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Trading Journal

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:
- ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userInfo.empId}
- Email: ${userInfo.email}
- ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: ${resetResult.temporaryPassword || resetResult.data?.temporaryPassword || 'Init4321'}

‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
- ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£

---
‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Trading Journal
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH')}
    `.trim();
    
    // ‡∏™‡πà‡∏á email (‡∏à‡∏∞‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Google Account ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Google Apps Script)
    MailApp.sendEmail({
      to: userInfo.email,
      subject: subject,
      body: emailBody,
      name: 'Trading Journal System' // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
    });
    
    console.log(`‚úÖ Password reset email sent successfully to ${userInfo.email}`);
    
    return createJSONResponse('success', '‡∏™‡πà‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', {
      to: userInfo.email,
      subject: subject,
      sentAt: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error sending password reset email:', error);
    return createJSONResponse('error', `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á email ‡πÑ‡∏î‡πâ: ${error.toString()}`);
  }
}

/**
 * Bulk password reset - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á
 * @returns {Object} Bulk reset result
 */
function bulkPasswordReset() {
  try {
    console.log('üîÑ Starting bulk password reset...');
    
    const spreadsheet = getSpreadsheetSafely();
    const userSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.USER);
    
    if (!userSheet) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï "${CONFIG.SHEETS.USER}"`);
    }
    
    const data = userSheet.getDataRange().getValues();
    if (data.length <= 1) {
      return createJSONResponse('warning', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
    
    const headers = data[0];
    // Using CONFIG constants instead of headerMap
    
    const results = {
      processed: 0,
      emailsSent: 0,
      errors: 0,
      users: []
    };
    
    // Process each user
    for (let i = 1; i < data.length; i++) {
      try {
        const row = data[i];
        const empId = row[CONFIG.COLUMNS.USER.EMP_ID];
        const email = row[CONFIG.COLUMNS.USER.EMAIL];
        const fullName = row[CONFIG.COLUMNS.USER.FULL_NAME_TH];
        const status = row[CONFIG.COLUMNS.USER.USER_STATUS];
        
        // Skip inactive users
        if (status !== 1) {
          console.log(`Skipping inactive user: ${empId}`);
          continue;
        }
        
        if (!empId || !email) {
          console.warn(`Missing data for row ${i + 1}: EmpId=${empId}, Email=${email}`);
          results.errors++;
          continue;
        }
        
        // Generate new password
        const emailPrefix = email.split('@')[0];
        const passwordString = emailPrefix + empId;
        const passwordHash = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, passwordString)
                                      .map(b => (b < 0 ? b + 256 : b).toString(16).padStart(2, '0'))
                                      .join('');
        
        // Update password in data array
        data[i][passwordIndex] = passwordHash;
        results.processed++;
        
        // Send email notification
        try {
          const userInfo = { empId, email, fullName };
          const resetData = { data: { passwordString, emailPrefix } };
          
          const emailResult = sendPasswordResetEmail(userInfo, resetData);
          if (emailResult.status === 'success') {
            results.emailsSent++;
          }
        } catch (emailError) {
          console.warn(`Failed to send email to ${email}:`, emailError);
        }
        
        results.users.push({
          empId: empId,
          email: email,
          fullName: fullName,
          passwordString: passwordString
        });
        
      } catch (userError) {
        console.error(`Error processing user at row ${i + 1}:`, userError);
        results.errors++;
      }
    }
    
    // Write updated passwords back to sheet
    if (results.processed > 0) {
      userSheet.getDataRange().setValues(data);
    }
    
    console.log(`‚úÖ Bulk password reset completed: ${results.processed} users processed, ${results.emailsSent} emails sent`);
    
    return createJSONResponse('success', `‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${results.processed} ‡∏Ñ‡∏ô, ‡∏™‡πà‡∏á email ‡πÅ‡∏à‡πâ‡∏á ${results.emailsSent} ‡∏Ñ‡∏ô`, results);
    
  } catch (error) {
    logError('bulkPasswordReset', error);
    return createJSONResponse('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.toString()}`);
  }
}

/**
 * Test password reset functionality
 * @returns {Object} Test results
 */
function testPasswordReset() {
  try {
    console.log('üß™ Testing password reset functionality...');
    
    // Test with existing user data from info.md
    const testEmails = [
      'likit@example.com', // Should exist if test users were created
      'nonexistent@example.com' // Should not exist
    ];
    
    const testResults = [];
    
    testEmails.forEach((email, index) => {
      console.log(`\n--- Test ${index + 1}: ${email} ---`);
      
      const result = requestPasswordReset(email);
      
      console.log(`Status: ${result.status}`);
      console.log(`Message: ${result.message}`);
      
      testResults.push({
        testCase: index + 1,
        email: email,
        result: result,
        success: result.status === 'success'
      });
    });
    
    const summary = {
      totalTests: testResults.length,
      successful: testResults.filter(r => r.success).length,
      failed: testResults.filter(r => !r.success).length
    };
    
    console.log('\n=== PASSWORD RESET TEST SUMMARY ===');
    console.log(`Total Tests: ${summary.totalTests}`);
    console.log(`Successful: ${summary.successful}`);
    console.log(`Failed: ${summary.failed}`);
    
    return createJSONResponse('success', 'Password reset tests completed', {
      summary: summary,
      testResults: testResults
    });
    
  } catch (error) {
    console.error('Error testing password reset:', error);
    return createJSONResponse('error', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${error.toString()}`);
  }
}